rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // リクエストが認証されているか（匿名認証を含む）
    function isAuthenticated() {
      return request.auth != null;
    }

    // ドキュメントの所有者かどうか
    function isOwn(userId) {
      return request.auth.uid == userId;
    }

    function isValidExamDataOnCreate() {
      return request.resource.data is map
        && request.resource.data.status == "requested"
        && request.resource.data.title == ""
        && request.resource.data.shortTitle == ""
        && request.resource.data.abstract == ""
        && request.resource.data.url is string
        && request.resource.data.media == "system"
        && request.resource.data.questions is list
        && request.resource.data.questions.size() == 0
        && request.resource.data.createdAt is timestamp
        && request.resource.data.updatedAt is timestamp
    }

    function isValidAnswerDataOnCreate() {
      let exam = get(/databases/$(database)/documents/exams/$(request.resource.data.examId)).data;
      return request.resource.data is map
        && request.resource.data.userId is string
        && request.resource.data.examId is string
        && request.resource.data.status == "answered"
        && request.resource.data.isPublish == false
        && request.resource.data.content is list
        && request.resource.data.grades is list
        && request.resource.data.grades.size() == 0
        && request.resource.data.examData is map
        && request.resource.data.createdAt is timestamp
        && request.resource.data.updatedAt is timestamp
        && exam.diff(request.resource.data.examData).removedKeys().hasOnly(['createdAt', 'updatedAt'])
    }

    function isValidAnswerDataOnUpdate() {
      return request.resource.data is map
        && request.resource.data.isPublish is bool
        && request.resource.data.updatedAt is timestamp
        && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['isPublish', 'updatedAt'])
    }

    match /exams/{examId} {
      allow create: if isAuthenticated() && isValidExamDataOnCreate() 
      allow read: if isAuthenticated();
      allow update, delete: if false;
    }

    match /answers/{answerId} {
      allow create: if isAuthenticated() && isValidAnswerDataOnCreate() && isOwn(request.resource.data.userId);
      allow update: if isAuthenticated() && isOwn(request.resource.data.userId) && isValidAnswerDataOnUpdate();
      allow read: if isAuthenticated()
                  && (resource.data.isPublish == true || isOwn(resource.data.userId));
      allow delete: if false;
    }
  }
}
